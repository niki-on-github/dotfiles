#!/bin/bash
# Description: Script to deploy my firefox work environment
# TODO how to set firefox theme to dark? (user.js do not work)

FIREFOX_PROFILES_DIRECOTRY="$HOME/.mozilla/firefox"
FIREFOX_CACHE_DIRECTORY="$HOME/.cache/mozilla/firefox"
GHACKS_USERJS_DIRECTORY="$HOME/.config/firefox/ghacks-user.js"
OVERRIDE_FILES_NORMAL="$HOME/.config/firefox/my-overrides/normal"
OVERRIDE_FILES_HARDENED="$HOME/.config/firefox/my-overrides/hardened"
PROFILES=( "Banking" "Private" "WebEx" )
ENGINES="(Google|DuckDuckGo)"
DEFAULT_ENGINE="DuckDuckGo"
ADDONS=( "bitwarden-password-manager" "canvasblocker" "darkreader" "decentraleyes" "floccus" "i-dont-care-about-cookies" "ublock-origin" )
ADDONS_PRIVATE=( "clearurls" "cookie-autodelete"  "multi-account-containers" "temporary-containers" "umatrix" )
ADDONS_OTHER=( "tabliss" )

TMP_ADDON_DIRECTORY=$(mktemp -d)
_mozlz4=$HOME/.local/bin/mozlz4

if command -v firefox ; then
    _firefox=firefox
elif command -v firefox-bin ; then
    _firefox=firefox-bin
else
    echo "firefox is not installed!"
    exit 1
fi

error() {
    echo -e "\033[0;31mERROR:\033[0;31m $@"; exit 1
}

warning() {
    echo -e "\033[0;31mWARNING:\033[0m $@";
}

function clearCache() {
    profileName=$1; shift
    [ -z "$profileName" ] && error "profileName in clearCache() is empty"
    rm -rf "$FIREFOX_CACHE_DIRECTORY/*.$profileName"
}

function updateConfigs() {
    profileName=$1; shift
    [ -z "$profileName" ] && error "profileName in updateConfigs() is empty"
    rm -rf "$firefoxProfileCachePath"
    while pidof $_firefox >/dev/null ; do sleep 1 ; done
    $_firefox --headless -new-instance -P "$profileName" >/dev/null 2>&1 &
    fid=$!; sleep 6; kill $fid; wait $fid; sleep 3
    clearCache "$profileName"
}

function downloadAddon() {
    firefoxProfilePath=$1; shift
    downloadID=$1; shift
    [ -z "$firefoxProfilePath" ] && error "firefoxProfilePath in downloadAddon() is empty"
    [ -z "$downloadID" ] && error "downloadID in downloadAddon() is empty"

    [ -d "$firefoxProfilePath" ] || return
    mkdir -p "$firefoxProfilePath/extensions"

    if [ ! -d "$TMP_ADDON_DIRECTORY/$downloadID" ]; then
        echo "Download $downloadID to $TMP_ADDON_DIRECTORY/$downloadID"
        mkdir -p "$TMP_ADDON_DIRECTORY/$downloadID"
        wget --quiet -O "$TMP_ADDON_DIRECTORY/$downloadID/addon.xpi" \
            "https://addons.mozilla.org/firefox/downloads/latest/$downloadID/latest.xpi"
        unzip "$TMP_ADDON_DIRECTORY/$downloadID/addon.xpi" manifest.json -d "$TMP_ADDON_DIRECTORY/$downloadID" >/dev/null
    fi

    [ ! -f "$TMP_ADDON_DIRECTORY/$downloadID/manifest.json" ] && warning "FileNotFound: manifest.json" && return
    addonID=$(jq '.applications.gecko.id' "$TMP_ADDON_DIRECTORY/$downloadID/manifest.json")
    if [ -z "$addonID" ] || [ "$addonID" = "null" ] || [ "$addonID" = "{}" ] ; then
        # try .browser_specific_settings.gecko.id parser
        addonID=$(jq '.browser_specific_settings.gecko.id' "$TMP_ADDON_DIRECTORY/$downloadID/manifest.json")
    fi
    if [ -z "$addonID" ] || [ "$addonID" = "null" ] || [ "$addonID" = "{}" ] ; then
        # try mozilla-recommendation.json parser
        [ -f "$TMP_ADDON_DIRECTORY/$downloadID/mozilla-recommendation.json" ] || \
            unzip "$TMP_ADDON_DIRECTORY/$downloadID/addon.xpi" mozilla-recommendation.json -d "$TMP_ADDON_DIRECTORY/$downloadID" >/dev/null
        [ ! -f "$TMP_ADDON_DIRECTORY/$downloadID/mozilla-recommendation.json" ] && warning "FileNotFound: mozilla-recommendation.json" && return
        addonID=$(jq '.addon_id' "$TMP_ADDON_DIRECTORY/$downloadID/mozilla-recommendation.json")
    fi
    if [ -z "$addonID" ] || [ "$addonID" = "null" ] || [ "$addonID" = "{}" ] ; then
        warning "Addon ID entry not exist"
        return
    fi

    addonID=$(echo $addonID | sed 's/"//g')
    [ -f "$firefoxProfilePath/extensions/$addonID.xpi" ] && echo "Addon $addonID is already installed" && return
    echo "Install $downloadID ($addonID)" && cp -f "$TMP_ADDON_DIRECTORY/$downloadID/addon.xpi" "$firefoxProfilePath/extensions/$addonID.xpi"

    ! grep -q "$addonID" $firefoxProfilePath/myaddon.list >/dev/null 2>&1 && \
        echo "$addonID" >> $firefoxProfilePath/myaddon.list
}

function activateAddons() {
    firefoxProfilePath=$1; shift
    profileName=$1; shift
    [ -z "$firefoxProfilePath" ] && error "firefoxProfilePath in activateAddons() is empty"
    [ -z "$profileName" ] && error "profileName in activateAddons() is empty"

    [ -d "$firefoxProfilePath" ] || return
    [ -f "$firefoxProfilePath/myaddon.list" ] || return

    updateConfigs "$profileName"
    for addonID in $(cat $firefoxProfilePath/myaddon.list) ; do
        echo "Activate Addon $addonID"
        cat $firefoxProfilePath/extensions.json | \
            jq '(.addons | .[] | select(.id=="'$addonID'") | .active) = true' | \
            jq '(.addons | .[] | select(.id=="'$addonID'") | .userDisabled) = false' \
            > $firefoxProfilePath/extensions_new.json
        sleep 0.2 && mv -f "$firefoxProfilePath/extensions_new.json" "$firefoxProfilePath/extensions.json"
    done

    rm -f $firefoxProfilePath/addonStartup.json.lz4
    rm -f $firefoxProfilePath/myaddon.list
}

function createProfile() {
    profileName=$1; shift
    [ -z "$profileName" ] && error "profileName in createProfile() is empty"
    if ! grep -q "Name=$profileName" $FIREFOX_PROFILES_DIRECOTRY/profiles.ini ; then
        echo "Create Profile: $profileName"
        $_firefox -CreateProfile "$profileName"
        updateConfigs "$profileName"
    fi
}

function setupSearchengine() {
    firefoxProfilePath=$1; shift
    [ -z "$firefoxProfilePath" ] && error "firefoxProfilePath in setupSearchengine() is empty"
    [ -f $_mozlz4 ] || error "File not Found: $_mozlz4"
    [ -f $firefoxProfilePath/search.json.mozlz4 ] || return

    tmpSearchJsonFile=$(mktemp)
    $_mozlz4 -x $firefoxProfilePath/search.json.mozlz4 $tmpSearchJsonFile
    search_json=$(cat $tmpSearchJsonFile)
    changeNumbers=$(jq '.engines | .[] | ._name' $tmpSearchJsonFile | grep -Env "$ENGINES" | cut -d ':' -f 1)
    for num in $changeNumbers ; do
        search_json=$(echo "$search_json" | jq '.engines['$(($num-1))']._metaData.hidden = "true"')
    done

    if [ "$(echo "$search_json" | jq '.metaData')" = "{}" ]; then
        echo "Set default search engine to $DEFAULT_ENGINE"
        echo "$search_json" | jq '. + {"metaData": {"current": "'$DEFAULT_ENGINE'"}}' > $tmpSearchJsonFile
    else
        echo "Override default search engine with $DEFAULT_ENGINE"
        echo "$search_json" | jq '. + {"metaData": {"current": "'$DEFAULT_ENGINE'"}}' > $tmpSearchJsonFile
    fi
    $_mozlz4 -z $tmpSearchJsonFile $firefoxProfilePath/search.json.mozlz4
}

function updateNormalUserJs() {
    firefoxProfilePath=$1; shift
    [ -z "$firefoxProfilePath" ] && error "firefoxProfilePath in updateNormalUserJs() is empty"
    echo "Install UserJs"
    cp -rf $OVERRIDE_FILES_NORMAL/* $firefoxProfilePath/
}

function updateHardenUserJs() {
    firefoxProfilePath=$1; shift
    [ -z "$firefoxProfilePath" ] && error "firefoxProfilePath in updateHardenUserJs() is empty"
    echo "Install hardened UserJs"
    cp -rf $OVERRIDE_FILES_HARDENED/* $firefoxProfilePath/
    cd $GHACKS_USERJS_DIRECTORY && sh updater.sh -s -b -p "$firefoxProfilePath" && cd - >/dev/null
}


# MAIN

command -v jq >/dev/null || error "script require jq"

read -p "Press the [Enter] key to continue. This will close all instances of Firefox"
pidof $_firefox >/dev/null && kill $(pidof $_firefox) && echo -n "close Firefox ." && sleep 1 && echo -n "." && sleep 1 && echo ". OK"

for profile in ${PROFILES[@]}; do
    createProfile "$profile"
done

profiles=$(cat $FIREFOX_PROFILES_DIRECOTRY/profiles.ini | tr '\n' ' ' | tr '[' '\n' | grep "Name" | \
    grep -v "Name=default " | sed 's/.*Name=//g' | sed 's/ .*Path=/,/g' | sed 's/ .*$//g')

for profile_data in $profiles ; do
    profileName=$(echo $profile_data | cut -d ',' -f 1)
    profilePath="$FIREFOX_PROFILES_DIRECOTRY/$(echo $profile_data| cut -d ',' -f 2)"
    profileCachePath="$FIREFOX_CACHE_DIRECTORY/$(echo $profile_data| cut -d ',' -f 2)"
    echo -e "\nSetup Firefox profile $profileName"

    setupSearchengine "$profilePath"

    for addon in ${ADDONS[@]}; do downloadAddon "$profilePath" "$addon"; done

    if [ "$profileName" = "Private" ]; then
        for addon in ${ADDONS_PRIVATE[@]}; do downloadAddon "$profilePath" "$addon"; done
        updateHardenUserJs "$profilePath"
    else
        updateNormalUserJs "$profilePath"
    fi

    activateAddons "$profilePath" "$profileName"
    clearCache "$profileName"
done

echo -e "\nNOTE: To activate the new addons firefox has to be launched and closed once to show the new addons in the toolbar."
